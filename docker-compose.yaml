# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:master-python3.8
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_GID                  - Group ID in Airflow containers
#                                Default: 50000
#
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: '3'
x-airflow-common:
  &airflow-common
  build:
    context: ./
    dockerfile: ./docker/airflow/Dockerfile
    args:
      AIRFLOW_IMAGE_NAME: ${AIRFLOW_IMAGE_NAME}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 30
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    PYTHONPATH: /opt/airflow/src
    DATA_TRAINING_FOLDER: /opt/airflow/training_data
    DATA_INTERMEDIA_FOLDER: /opt/airflow/intermedia_data
    DATA_PREDICTION_INPUT: /opt/airflow/prediction_input
    DATA_PREDICTION_OUTPUT: /opt/airflow/prediction_output
    MLFLOW_TRACKING_URI: http://mlflow:5000
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./src:/opt/airflow/src
    - ./plugins:/opt/airflow/plugins
    - ./data/training_data:/opt/airflow/training_data
    - ./data/prediction_input:/opt/airflow/prediction_input
    - ./data/prediction_output:/opt/airflow/prediction_output
    - ./data/intermedia:/opt/airflow/intermedia_data
    - ./data/artifacts:${ARTIFACT_PATH}
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  waitfordb:
    image: dadarek/wait-for-dependencies
    depends_on:
      - postgresql
    command: postgresql:5432

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  postgresql:
    image: postgres:13
    container_name: postgresql
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: mlflow-db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    hostname: postgresql
    restart: always

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  mlflow:
    image: ${DOCKERHUB_ACC}/mlflow
    build: docker/mlflow/.
    container_name: mlflow
    ports:
      - ${MLFLOW_PORT}:${MLFLOW_PORT}
    depends_on:
      - postgresql
      - waitfordb
    volumes:
      - ./data/artifacts:${ARTIFACT_PATH}
    environment:
      DB_URI: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/mlflow-db
      VIRTUAL_HOST: ${HOST}
      VIRTUAL_PORT: ${MLFLOW_PORT}
      ARTIFACT_PATH: ${ARTIFACT_PATH}
    command: ./start.sh
    # <<debug>>
    # stdin_open: true
    # tty: true
    # command: /bin/bash

  # spark-master:
  #   image: ${DOCKERHUB_ACC}/spark
  #   build:
  #     context: ./
  #     dockerfile: ./docker/spark/Dockerfile
  #   ports:
  #     - "9090:8080"
  #     - "7077:7077"
  #   volumes:
  #      - ./apps:/opt/spark-apps
  #      - ./data:/opt/spark-data
  #   environment:
  #     - SPARK_LOCAL_IP=spark-master
  #     - SPARK_WORKLOAD=master
  # spark-worker-a:
  #   image: ${DOCKERHUB_ACC}/spark
  #   ports:
  #     - "9091:8080"
  #     - "7000:7000"
  #   depends_on:
  #     - spark-master
  #   environment:
  #     - SPARK_MASTER=spark://spark-master:7077
  #     - SPARK_WORKER_CORES=1
  #     - SPARK_WORKER_MEMORY=1G
  #     - SPARK_DRIVER_MEMORY=1G
  #     - SPARK_EXECUTOR_MEMORY=1G
  #     - SPARK_WORKLOAD=worker
  #     - SPARK_LOCAL_IP=spark-worker-a
  #   volumes:
  #      - ./apps:/opt/spark-apps
  #      - ./data:/opt/spark-data
  # spark-worker-b:
  #   image: ${DOCKERHUB_ACC}/spark
  #   ports:
  #     - "9092:8080"
  #     - "7001:7000"
  #   depends_on:
  #     - spark-master
  #   environment:
  #     - SPARK_MASTER=spark://spark-master:7077
  #     - SPARK_WORKER_CORES=1
  #     - SPARK_WORKER_MEMORY=1G
  #     - SPARK_DRIVER_MEMORY=1G
  #     - SPARK_EXECUTOR_MEMORY=1G
  #     - SPARK_WORKLOAD=worker
  #     - SPARK_LOCAL_IP=spark-worker-b
  #   volumes:
  #       - ./apps:/opt/spark-apps
  #       - ./data:/opt/spark-data

  # dev:
  #   image: ${DOCKERHUB_ACC}/airflow-ml-dev
  #   build:
  #     context: ./
  #     dockerfile: ./docker/dev_container/Dockerfile
  #   container_name: dev
  #   volumes:
  #     - ./dags:/code/dags
  #     - ./logs:/code/logs
  #     - ./src:/code/src
  #     - ./data/source:/code/source_data
  #     - ./data/intermedia:/code/intermedia_data
  #   environment:
  #     MOODLE_DOCKER_DBTYPE: pgsql
  #   tty: true
volumes:
  postgres-db-volume: